name: Deploy Order System App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout do código
    - name: Checkout code
      uses: actions/checkout@v2

    # Configurar o Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    # Instalar dependências
    - name: Install dependencies
      run: npm install
      working-directory: ./order-system-app

    # Compactar o app para deploy
    - name: Package app
      run: zip -r order-system-app.zip .
      working-directory: ./order-system-app

    # Configurar as credenciais AWS com secrets para acesso ao EKS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Instalar kubectl para interação com o cluster Kubernetes (EKS)
    - name: Setup kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.22.0'  # Ajuste a versão do kubectl de acordo com seu cluster

    # Obter o contexto do cluster EKS
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name <nome-do-cluster-EKS>

    # Criar o secret no Kubernetes para armazenar o token PagSeguro
    - name: Create Kubernetes secret for PagSeguro
      run: |
        kubectl create secret generic pagseguro-secret --from-literal=pagseguro-auth-token=${{ secrets.PAGSEGURO_AUTH_TOKEN }}

    # Aplicar o deployment e service do app no Kubernetes
    - name: Deploy app to Kubernetes
      run: |
        kubectl apply -f ./kubernetes-infra/k8s/appnode-deployment.yaml
        kubectl apply -f ./kubernetes-infra/k8s/appnode-service.yaml

    # Verificar o status do deployment
    - name: Verify Deployment
      run: kubectl rollout status deployment/node-app